const XLSX = require('xlsx');
const Database = require('better-sqlite3');
const path = require('path');

// Configuration
const excelPath = path.join(__dirname, '../../defis-besuccess.xlsx');
const dbPath = path.join(__dirname, '../database/challenges.db');

console.log('üöÄ Import des d√©fis depuis Excel vers la base de donn√©es');
console.log('='.repeat(60));

// Mapping des cat√©gories avec leurs couleurs et ic√¥nes
const categoriesConfig = {
    'Activit√©s hors du commun': { color: '#EF4444', icon: 'üé≠', description: 'Osez l\'extraordinaire' },
    'Communication': { color: '#F59E0B', icon: 'üé§', description: 'D√©veloppez votre aisance relationnelle' },
    'En Public !': { color: '#EC4899', icon: 'üé™', description: 'Sortez de votre zone de confort' },
    'G√©n√©rosit√©': { color: '#10B981', icon: 'üíù', description: 'Partagez et donnez' },
    'Au boulot !': { color: '#3B82F6', icon: 'üíº', description: 'D√©passez-vous professionnellement' },
    'Sensations fortes': { color: '#8B5CF6', icon: '‚ö°', description: 'Vivez l\'adr√©naline' },
    'A l\'institut': { color: '#06B6D4', icon: 'üíÜ', description: 'Prenez soin de vous' },
    'Le coin culinaire': { color: '#F97316', icon: 'üçΩÔ∏è', description: 'Explorez de nouvelles saveurs' },
    'Voyage Voyage': { color: '#14B8A6', icon: '‚úàÔ∏è', description: 'D√©couvrez le monde' },
    'Animaux intriguants': { color: '#84CC16', icon: 'üêæ', description: 'Rencontrez nos amis les b√™tes' }
};

try {
    // Lire le fichier Excel
    console.log('üìÇ Lecture du fichier Excel...');
    const workbook = XLSX.readFile(excelPath);
    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    const data = XLSX.utils.sheet_to_json(worksheet, { defval: '' });
    
    console.log(`‚úÖ ${data.length} lignes lues`);
    
    // Connexion √† la base de donn√©es
    console.log('\nüì¶ Connexion √† la base de donn√©es...');
    const db = new Database(dbPath);
    
    // D√©sactiver temporairement les foreign keys
    db.exec('PRAGMA foreign_keys = OFF');
    
    // Nettoyer les anciennes donn√©es (seulement challenges et themes)
    console.log('üßπ Nettoyage des anciennes donn√©es...');
    db.exec('DELETE FROM challenges');
    db.exec('DELETE FROM themes');
    
    // R√©initialiser les compteurs auto-increment (si la table existe)
    try {
        db.exec('DELETE FROM sqlite_sequence WHERE name IN ("challenges", "themes")');
    } catch (e) {
        // La table sqlite_sequence n'existe pas encore, pas grave
    }
    
    // Pr√©parer les requ√™tes
    const insertTheme = db.prepare('INSERT INTO themes (name, description, color, icon) VALUES (?, ?, ?, ?)');
    const insertChallenge = db.prepare('INSERT INTO challenges (theme_id, title, description, difficulty, points) VALUES (?, ?, ?, ?, ?)');
    
    let totalChallenges = 0;
    let themeCount = 0;
    let themeId = 0;
    
    // Utiliser une transaction pour tout ins√©rer d'un coup
    const importAll = db.transaction(() => {
        // Traiter chaque cat√©gorie
        Object.entries(categoriesConfig).forEach(([categoryName, config]) => {
            themeCount++;
        
        console.log(`\n${'='.repeat(60)}`);
        console.log(`üìÅ Cat√©gorie: ${categoryName} ${config.icon}`);
        
        // Ins√©rer le th√®me et r√©cup√©rer son ID
        const result = insertTheme.run(categoryName, config.description, config.color, config.icon);
        themeId = result.lastInsertRowid;
        console.log(`   ‚úÖ Th√®me cr√©√© (ID: ${themeId})`);
        
        // Extraire les d√©fis de cette colonne (ignorer la premi√®re ligne qui contient le nombre)
        const defis = data
            .slice(1) // Ignorer la premi√®re ligne
            .map(row => row[categoryName])
            .filter(defi => defi && defi.trim() !== ''); // Filtrer les vides
        
        console.log(`   üìù ${defis.length} d√©fis trouv√©s`);
        
        // Ins√©rer chaque d√©fi
        defis.forEach((defi, index) => {
            // Calculer difficult√© et points (distribution √©quilibr√©e)
            const position = index / defis.length;
            let difficulty, points;
            
            if (position < 0.2) {
                difficulty = 1; points = 10;
            } else if (position < 0.4) {
                difficulty = 2; points = 15;
            } else if (position < 0.6) {
                difficulty = 3; points = 20;
            } else if (position < 0.8) {
                difficulty = 4; points = 25;
            } else {
                difficulty = 5; points = 30;
            }
            
            // Nettoyer et limiter la longueur
            const title = defi.length > 100 ? defi.substring(0, 97) + '...' : defi;
            const description = defi.length > 200 ? defi : `Relevez ce d√©fi: ${defi}`;
            
            insertChallenge.run(themeId, title, description, difficulty, points);
            totalChallenges++;
        });
        
        console.log(`   ‚úÖ ${defis.length} d√©fis ins√©r√©s`);
        });
    });
    
    // Ex√©cuter la transaction
    importAll();
    
    // R√©activer les foreign keys
    db.exec('PRAGMA foreign_keys = ON');
    
    db.close();
    
    console.log('\n' + '='.repeat(60));
    console.log('üéâ Import termin√© avec succ√®s !');
    console.log(`üìä Statistiques:`);
    console.log(`   - Th√®mes cr√©√©s: ${themeCount}`);
    console.log(`   - D√©fis import√©s: ${totalChallenges}`);
    console.log('='.repeat(60));
    
} catch (error) {
    console.error('‚ùå Erreur lors de l\'import:', error.message);
    console.error(error);
    process.exit(1);
}
